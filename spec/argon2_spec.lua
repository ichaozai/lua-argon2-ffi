local argon2 = require "argon2"

describe("argon2", function()
  it("_VERSION field", function()
    assert.equal("1.0.0", argon2._VERSION)
  end)
  it("_AUTHOR field", function()
    assert.equal("Thibault Charbonnier", argon2._AUTHOR)
  end)
  it("_LICENSE field", function()
    assert.equal("MIT", argon2._LICENSE)
  end)
  it("_URL field", function()
    assert.equal("https://github.com/thibaultCha/lua-argon2-ffi", argon2._URL)
  end)
end)

describe("encrypt()", function()
  it("should throw error on invalid argument", function()
    assert.has_error(function()
      argon2.encrypt(nil)
    end, "bad argument #1 to 'encrypt' (string expected, got nil)")

    assert.has_error(function()
      argon2.encrypt("", nil)
    end, "bad argument #2 to 'encrypt' (string expected, got nil)")

    assert.has_error(function()
      argon2.encrypt("", "", "")
    end, "bad argument #3 to 'encrypt' (table expected, got string)")

    assert.has_error(function()
      argon2.encrypt("", "", {t_cost = ""})
    end, "expected t_cost to be a number")

    assert.has_error(function()
      argon2.encrypt("", "", {m_cost = ""})
    end, "expected m_cost to be a number")

    assert.has_error(function()
      argon2.encrypt("", "", {parallelism = ""})
    end, "expected parallelism to be a number")

    assert.has_error(function()
      argon2.encrypt("", "", {hash_len = ""})
    end, "expected hash_len to be a number")
  end)
  it("salt too short", function()
    local hash, err = argon2.encrypt("password", "")
    assert.falsy(hash)
    assert.equal("Salt is too short", err)

    hash, err = argon2.encrypt("password", "abcdefg")
    assert.falsy(hash)
    assert.equal("Salt is too short", err)
  end)
  it("hash_len too short", function()
    local hash, err = argon2.encrypt("password", "somesalt", {hash_len = 2})
    assert.falsy(hash)
    assert.equal("Output is too short", err)
  end)
  it("should return a hash", function()
    local hash = assert(argon2.encrypt("password", "somesalt"))
    assert.matches("$argon2i$v=19$m=12,t=2,p=1$", hash, nil, true)
    local hash_pattern = "%$" .. string.rep(".", 43) .. "$"
    assert.matches(hash_pattern, hash)
  end)
  it("should return a hash with longer encoded_len", function()
    local hash = assert(argon2.encrypt("password", string.rep("salt", 10)))
    assert.matches("$argon2i$v=19$m=12,t=2,p=1$", hash, nil, true)
  end)
  it("should hash with argon2d", function()
    local hash = assert(argon2.encrypt("password", "somesalt", {argon2d = true}))
    assert.matches("argon2d", hash)
  end)
  it("should accept time cost", function()
    local hash = assert(argon2.encrypt("password", "somesalt", {t_cost = 4}))
    assert.matches("t=4", hash)
  end)
  it("should accept memory cost", function()
    local hash = assert(argon2.encrypt("password", "somesalt", {m_cost = 13}))
    assert.matches("m=13", hash)
  end)
  it("should accept parallelism", function()
    local hash = assert(argon2.encrypt("password", "somesalt", {parallelism = 2, m_cost = 24}))
    assert.matches("p=2", hash)
  end)
  it("should accept hash_len", function()
    local hash = assert(argon2.encrypt("password", "somesalt", {hash_len = 7}))
    local hash_pattern = "%$" .. string.rep(".", 10) .. "$"
    assert.matches(hash_pattern, hash)
  end)
  it("should accept all options", function()
    local hash = assert(argon2.encrypt("password", "somesalt", {
      t_cost = 4,
      m_cost = 24,
      parallelism = 2, 
      hash_len = 9
    }))
    assert.matches("m=24,t=4,p=2", hash)
    local hash_pattern = "%$" .. string.rep(".", 12) .. "$"
    assert.matches(hash_pattern, hash)
  end)
end)

describe("verify()", function()
  it("should throw error on invalid argument", function()
    assert.has_error(function()
      argon2.verify(nil)
    end, "bad argument #1 to 'verify' (string expected, got nil)")

    assert.has_error(function()
      argon2.verify("", nil)
    end, "bad argument #2 to 'verify' (string expected, got nil)")
  end)
  it("should verify ok", function()
    local hash = assert(argon2.encrypt("password", "somesalt"))
    assert(argon2.verify(hash, "password"))
  end)
  it("should verify ok with hash_len option", function()
    local hash = assert(argon2.encrypt("password", "somesalt", {hash_len = 10}))
    assert(argon2.verify(hash, "password"))
  end)
  it("should verify fail", function()
    local hash = assert(argon2.encrypt("password", "somesalt"))
    local ok, err = argon2.verify(hash, "passworld")
    assert.False(ok)
    assert.equal("The password did not match.", err)
  end)
  it("should verify argon2d ok", function()
    local hash = assert(argon2.encrypt("password", "somesalt", {argon2d = true}))
    assert(argon2.verify(hash, "password"))
  end)
  it("should verify argon2d ok with hash_len option", function()
    local hash = assert(argon2.encrypt("password", "somesalt", {
      argon2d = true, 
      hash_len = 10
    }))
    assert(argon2.verify(hash, "password"))
  end)
  it("should verify argon2d fail", function()
    local hash = assert(argon2.encrypt("password", "somesalt", {argon2d = true}))
    local ok, err = argon2.verify(hash, "passworld")
    assert.False(ok)
    assert.equal("The password did not match.", err)
  end)
end)
